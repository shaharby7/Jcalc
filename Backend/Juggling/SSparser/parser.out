Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sequence
Rule 1     sequence -> sequence throw
Rule 2     sequence -> throw
Rule 3     throw -> THROW
Rule 4     throw -> HANDS_ASSIGNMENT
Rule 5     throw -> L_PARENTHESIS sequence R_PARENTHESIS

Terminals, with rules where they appear

HANDS_ASSIGNMENT     : 4
L_PARENTHESIS        : 5
R_PARENTHESIS        : 5
THROW                : 3
error                : 

Nonterminals, with rules where they appear

sequence             : 1 5 0
throw                : 1 2

Parsing method: LALR

state 0

    (0) S' -> . sequence
    (1) sequence -> . sequence throw
    (2) sequence -> . throw
    (3) throw -> . THROW
    (4) throw -> . HANDS_ASSIGNMENT
    (5) throw -> . L_PARENTHESIS sequence R_PARENTHESIS

    THROW           shift and go to state 3
    HANDS_ASSIGNMENT shift and go to state 4
    L_PARENTHESIS   shift and go to state 5

    sequence                       shift and go to state 1
    throw                          shift and go to state 2

state 1

    (0) S' -> sequence .
    (1) sequence -> sequence . throw
    (3) throw -> . THROW
    (4) throw -> . HANDS_ASSIGNMENT
    (5) throw -> . L_PARENTHESIS sequence R_PARENTHESIS

    THROW           shift and go to state 3
    HANDS_ASSIGNMENT shift and go to state 4
    L_PARENTHESIS   shift and go to state 5

    throw                          shift and go to state 6

state 2

    (2) sequence -> throw .

    THROW           reduce using rule 2 (sequence -> throw .)
    HANDS_ASSIGNMENT reduce using rule 2 (sequence -> throw .)
    L_PARENTHESIS   reduce using rule 2 (sequence -> throw .)
    $end            reduce using rule 2 (sequence -> throw .)
    R_PARENTHESIS   reduce using rule 2 (sequence -> throw .)


state 3

    (3) throw -> THROW .

    THROW           reduce using rule 3 (throw -> THROW .)
    HANDS_ASSIGNMENT reduce using rule 3 (throw -> THROW .)
    L_PARENTHESIS   reduce using rule 3 (throw -> THROW .)
    $end            reduce using rule 3 (throw -> THROW .)
    R_PARENTHESIS   reduce using rule 3 (throw -> THROW .)


state 4

    (4) throw -> HANDS_ASSIGNMENT .

    THROW           reduce using rule 4 (throw -> HANDS_ASSIGNMENT .)
    HANDS_ASSIGNMENT reduce using rule 4 (throw -> HANDS_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 4 (throw -> HANDS_ASSIGNMENT .)
    $end            reduce using rule 4 (throw -> HANDS_ASSIGNMENT .)
    R_PARENTHESIS   reduce using rule 4 (throw -> HANDS_ASSIGNMENT .)


state 5

    (5) throw -> L_PARENTHESIS . sequence R_PARENTHESIS
    (1) sequence -> . sequence throw
    (2) sequence -> . throw
    (3) throw -> . THROW
    (4) throw -> . HANDS_ASSIGNMENT
    (5) throw -> . L_PARENTHESIS sequence R_PARENTHESIS

    THROW           shift and go to state 3
    HANDS_ASSIGNMENT shift and go to state 4
    L_PARENTHESIS   shift and go to state 5

    sequence                       shift and go to state 7
    throw                          shift and go to state 2

state 6

    (1) sequence -> sequence throw .

    THROW           reduce using rule 1 (sequence -> sequence throw .)
    HANDS_ASSIGNMENT reduce using rule 1 (sequence -> sequence throw .)
    L_PARENTHESIS   reduce using rule 1 (sequence -> sequence throw .)
    $end            reduce using rule 1 (sequence -> sequence throw .)
    R_PARENTHESIS   reduce using rule 1 (sequence -> sequence throw .)


state 7

    (5) throw -> L_PARENTHESIS sequence . R_PARENTHESIS
    (1) sequence -> sequence . throw
    (3) throw -> . THROW
    (4) throw -> . HANDS_ASSIGNMENT
    (5) throw -> . L_PARENTHESIS sequence R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 8
    THROW           shift and go to state 3
    HANDS_ASSIGNMENT shift and go to state 4
    L_PARENTHESIS   shift and go to state 5

    throw                          shift and go to state 6

state 8

    (5) throw -> L_PARENTHESIS sequence R_PARENTHESIS .

    THROW           reduce using rule 5 (throw -> L_PARENTHESIS sequence R_PARENTHESIS .)
    HANDS_ASSIGNMENT reduce using rule 5 (throw -> L_PARENTHESIS sequence R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 5 (throw -> L_PARENTHESIS sequence R_PARENTHESIS .)
    $end            reduce using rule 5 (throw -> L_PARENTHESIS sequence R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 5 (throw -> L_PARENTHESIS sequence R_PARENTHESIS .)

